[tool.poetry]
name = "ngx-closer-agent"
version = "1.0.0"
description = "NGX Voice Sales Agent - Sistema avanzado de agentes conversacionales para ventas"
authors = ["NGX Team <team@ngx.com>"]
readme = "README.md"
python = "^3.10"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.venv_clean
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [".venv", ".venv_clean", "venv", "migrations"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = [
    "venv/",
    ".venv/",
    ".venv_clean/",
    "tests/",
    "migrations/",
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=70",
]
testpaths = ["tests"]
pythonpath = ["."]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/.venv_clean/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", ".venv_clean"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D107"]
match-dir = "(?!tests|migrations|venv|.venv).*"

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
max-complexity = 10
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    ".venv_clean",
    "*.egg-info",
    "build",
    "dist",
    "migrations",
]
per-file-ignores = [
    "__init__.py: F401",
    "test_*.py: S101",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # flake8-bandit
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    ".venv_clean",
    "*.egg-info",
    "build",
    "dist",
    "migrations",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]