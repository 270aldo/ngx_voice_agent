version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: ngx-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
      - nginx-logs:/var/log/nginx
    networks:
      - ngx-network
      - monitoring
    depends_on:
      - app
    labels:
      - "com.ngx.service=nginx"
      - "com.ngx.component=proxy"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/stub_status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGX Voice Sales Agent API
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - BUILD_ENV=production
    image: ngx-voice-agent:latest
    container_name: ngx-agent
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - WORKERS=4
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - ngx-network
      - monitoring
    depends_on:
      - redis
      - postgres
    labels:
      - "com.ngx.service=voice-agent"
      - "com.ngx.component=api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ngx-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ngx-network
      - monitoring
    labels:
      - "com.ngx.service=redis"
      - "com.ngx.component=cache"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # PostgreSQL (if self-hosting instead of Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: ngx-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=en_US.UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - ngx-network
      - monitoring
    labels:
      - "com.ngx.service=postgres"
      - "com.ngx.component=database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: ngx-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - ngx-network
    depends_on:
      - postgres
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do /backup.sh; sleep 86400; done"]
    labels:
      - "com.ngx.service=backup"
      - "com.ngx.component=utility"

  # Monitoring Stack (Optional - can be deployed separately)
  prometheus:
    extends:
      file: ./monitoring/docker-compose.monitoring.yml
      service: prometheus
    networks:
      - monitoring
      - ngx-network

  grafana:
    extends:
      file: ./monitoring/docker-compose.monitoring.yml
      service: grafana
    networks:
      - monitoring
      - ngx-network

  node-exporter:
    extends:
      file: ./monitoring/docker-compose.monitoring.yml
      service: node-exporter
    networks:
      - monitoring

  redis-exporter:
    extends:
      file: ./monitoring/docker-compose.monitoring.yml
      service: redis-exporter
    networks:
      - monitoring
      - ngx-network

  nginx-exporter:
    extends:
      file: ./monitoring/docker-compose.monitoring.yml
      service: nginx-exporter
    networks:
      - monitoring
      - ngx-network

networks:
  ngx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local