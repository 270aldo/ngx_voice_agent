name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip load tests'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image
  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: 
      name: staging
      url: https://staging.ngx-voice-agent.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS Staging
        run: |
          # Update ECS task definition with new image
          aws ecs describe-task-definition \
            --task-definition ngx-voice-agent-staging \
            --query taskDefinition > task-def.json
          
          # Update image URI in task definition
          jq --arg IMAGE "${{ needs.build-and-push.outputs.image-tag }}" \
            '.containerDefinitions[0].image = $IMAGE' task-def.json > updated-task-def.json
          
          # Register new task definition revision
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json
          
          # Update service to use new task definition
          aws ecs update-service \
            --cluster ngx-staging \
            --service ngx-voice-agent-staging \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ngx-staging \
            --services ngx-voice-agent-staging \
            --timeout 600

      - name: Verify staging deployment
        run: |
          # Health check
          curl -f https://staging.ngx-voice-agent.com/health
          
          # Basic API test
          curl -f -X POST https://staging.ngx-voice-agent.com/api/v1/conversation \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.STAGING_API_TOKEN }}" \
            -d '{"message": "Hello", "session_id": "test-deployment"}'

  # Run full load tests on staging
  load-test-staging:
    name: Full Load Test (Staging)
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install load testing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust requests

      - name: Run comprehensive load test
        run: |
          cd tests/load
          locust -f test_load_1000_users.py --headless \
            --users 100 --spawn-rate 10 --run-time 300s \
            --host https://staging.ngx-voice-agent.com \
            --html staging-load-test-report.html \
            --csv staging-load-test

      - name: Analyze load test results
        run: |
          cd tests/load
          python -c "
          import csv
          import sys
          
          # Check failure rate
          with open('staging-load-test_stats.csv', 'r') as f:
              reader = csv.DictReader(f)
              for row in reader:
                  if row['Name'] == 'Aggregated':
                      failure_rate = float(row['Failure Count']) / float(row['Request Count']) * 100
                      avg_response = float(row['Average Response Time'])
                      
                      print(f'Failure Rate: {failure_rate:.2f}%')
                      print(f'Average Response Time: {avg_response:.2f}ms')
                      
                      if failure_rate > 1.0:  # Max 1% failure rate
                          print('❌ Load test failed: High failure rate')
                          sys.exit(1)
                      
                      if avg_response > 2000:  # Max 2s average response time
                          print('❌ Load test failed: High response time')
                          sys.exit(1)
                      
                      print('✅ Load test passed')
          "

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-load-test-results
          path: |
            tests/load/staging-load-test-report.html
            tests/load/staging-load-test_*.csv

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, load-test-staging]
    if: (success() && github.ref == 'refs/heads/main') || github.event.inputs.environment == 'production'
    environment: 
      name: production
      url: https://api.ngx-voice-agent.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create production deployment backup
        run: |
          # Backup current production task definition
          aws ecs describe-task-definition \
            --task-definition ngx-voice-agent-production \
            --query taskDefinition > production-backup-$(date +%Y%m%d%H%M%S).json

      - name: Deploy to ECS Production
        run: |
          # Update ECS task definition with new image
          aws ecs describe-task-definition \
            --task-definition ngx-voice-agent-production \
            --query taskDefinition > task-def.json
          
          # Update image URI in task definition
          jq --arg IMAGE "${{ needs.build-and-push.outputs.image-tag }}" \
            '.containerDefinitions[0].image = $IMAGE' task-def.json > updated-task-def.json
          
          # Register new task definition revision
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json
          
          # Update service with rolling deployment
          aws ecs update-service \
            --cluster ngx-production \
            --service ngx-voice-agent-production \
            --force-new-deployment

      - name: Wait for production deployment
        run: |
          aws ecs wait services-stable \
            --cluster ngx-production \
            --services ngx-voice-agent-production \
            --timeout 900  # 15 minutes timeout for production

      - name: Verify production deployment
        run: |
          # Health check
          curl -f https://api.ngx-voice-agent.com/health
          
          # Basic API test
          curl -f -X POST https://api.ngx-voice-agent.com/api/v1/conversation \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.PRODUCTION_API_TOKEN }}" \
            -d '{"message": "Hello", "session_id": "test-deployment"}'

      - name: Run post-deployment monitoring
        run: |
          # Monitor for 5 minutes post-deployment
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" https://api.ngx-voice-agent.com/health)
            if [[ $status != "200" ]]; then
              echo "❌ Health check failed with status $status"
              exit 1
            fi
            echo "✅ Health check $i/30 passed"
            sleep 10
          done

  # Rollback capability
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Rollback to previous version
        run: |
          # Get previous task definition
          previous_task_def=$(aws ecs list-task-definitions \
            --family-prefix ngx-voice-agent-production \
            --status ACTIVE \
            --sort DESC \
            --query 'taskDefinitionArns[1]' \
            --output text)
          
          # Update service to use previous task definition
          aws ecs update-service \
            --cluster ngx-production \
            --service ngx-voice-agent-production \
            --task-definition $previous_task_def \
            --force-new-deployment

      - name: Wait for rollback completion
        run: |
          aws ecs wait services-stable \
            --cluster ngx-production \
            --services ngx-voice-agent-production

      - name: Verify rollback
        run: |
          curl -f https://api.ngx-voice-agent.com/health

  # Update deployment status
  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentResults = {
              staging: '${{ needs.deploy-staging.result }}',
              production: '${{ needs.deploy-production.result }}'
            };
            
            let message = '## 🚀 Deployment Report\n\n';
            message += `**Commit:** ${context.sha.substring(0, 7)}\n`;
            message += `**Branch:** ${context.ref.replace('refs/heads/', '')}\n\n`;
            message += '### Results\n';
            
            if (deploymentResults.staging === 'success') {
              message += '✅ **Staging**: Deployed successfully\n';
            } else if (deploymentResults.staging === 'failure') {
              message += '❌ **Staging**: Deployment failed\n';
            } else {
              message += '⏭️ **Staging**: Skipped\n';
            }
            
            if (deploymentResults.production === 'success') {
              message += '✅ **Production**: Deployed successfully\n';
            } else if (deploymentResults.production === 'failure') {
              message += '❌ **Production**: Deployment failed\n';
            } else {
              message += '⏭️ **Production**: Skipped or pending approval\n';
            }
            
            // Create a deployment issue if there are failures
            if (deploymentResults.staging === 'failure' || deploymentResults.production === 'failure') {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Deployment Failure - ${new Date().toISOString()}`,
                body: message + '\n\n**Action Required**: Please investigate the deployment failure.',
                labels: ['deployment', 'urgent']
              });
            }
            
            console.log(message);