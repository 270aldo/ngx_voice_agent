name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies for security scanning
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          pip install -r requirements.txt

      - name: Run safety check (dependency vulnerabilities)
        run: safety check --json --output safety-report.json || echo "Safety check completed with findings"

      - name: Run bandit security analysis
        run: |
          bandit -r src/ -f json -o bandit-report.json || echo "Bandit analysis completed"

      - name: Run semgrep security scanning
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || echo "Semgrep analysis completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Black formatter check
        run: black --check --diff src/ tests/

      - name: Run isort import sorting check
        run: isort --check-only --diff src/ tests/

      - name: Run flake8 linting
        run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Run mypy type checking
        run: mypy src/ --ignore-missing-imports --no-strict-optional

      - name: Run pylint analysis
        run: pylint src/ --exit-zero --output-format=json > pylint-report.json

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: pylint-report.json

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, security]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -r requirements-test.txt
          pip install pytest-cov pytest-xdist pytest-asyncio

      - name: Set up test environment
        run: |
          cp env.example .env
          echo "TESTING=true" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_TEST }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL_TEST }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_ANON_KEY_TEST }}" >> .env

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html \
            --junitxml=pytest-unit.xml -m "not integration and not security"

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/integration/ tests/capabilities/ -v \
            --junitxml=pytest-integration.xml -m "integration"

      - name: Run security tests
        if: matrix.test-type == 'security'
        run: |
          pytest tests/security/ -v --junitxml=pytest-security.xml -m "security"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            pytest-*.xml
            htmlcov/
            .coverage

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Load testing (smoke test for CI)
  load-test-smoke:
    name: Load Test (Smoke)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Set up test environment
        run: |
          cp env.example .env
          echo "TESTING=true" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env

      - name: Start API server in background
        run: |
          uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10  # Wait for server to start

      - name: Run smoke load test
        run: |
          cd tests/load
          locust -f test_load_1000_users.py --headless \
            --users 10 --spawn-rate 2 --run-time 30s \
            --host http://localhost:8000 \
            --html smoke-test-report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-smoke-results
          path: tests/load/smoke-test-report.html

  # Build and validate Docker image
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: ngx-voice-agent:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container \
            -p 8001:8000 \
            -e TESTING=true \
            ngx-voice-agent:${{ github.sha }}
          
          sleep 10
          
          # Basic health check
          curl -f http://localhost:8001/health || exit 1
          
          docker stop test-container

  # Consolidate results
  ci-results:
    name: CI Results
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test, load-test-smoke, docker-build]
    if: always()

    steps:
      - name: Check CI status
        run: |
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Load Test: ${{ needs.load-test-smoke.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          if [[ "${{ needs.security-scan.result }}" == "failure" || 
                "${{ needs.code-quality.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.docker-build.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate CI report
        run: |
          echo "# CI Pipeline Report" > ci-report.md
          echo "**Branch:** ${{ github.ref }}" >> ci-report.md
          echo "**Commit:** ${{ github.sha }}" >> ci-report.md
          echo "**Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> ci-report.md
          echo "" >> ci-report.md
          echo "## Results" >> ci-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> ci-report.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> ci-report.md
          echo "- Tests: ${{ needs.test.result }}" >> ci-report.md
          echo "- Load Test: ${{ needs.load-test-smoke.result }}" >> ci-report.md
          echo "- Docker Build: ${{ needs.docker-build.result }}" >> ci-report.md

      - name: Upload CI report
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: ci-report.md

  # Add PR comment with results
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [ci-results]
    if: github.event_name == 'pull_request' && always()

    steps:
      - name: Download CI report
        uses: actions/download-artifact@v4
        with:
          name: ci-report

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ci-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });