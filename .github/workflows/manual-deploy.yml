name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
      skip_tests:
        description: 'Skip load tests'
        required: false
        default: false
        type: boolean
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  manual-deploy:
    name: Manual Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.environment == 'production' && secrets.AWS_ACCESS_KEY_ID_PRODUCTION || secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ github.event.inputs.environment == 'production' && secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION || secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set deployment variables
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "CLUSTER_NAME=ngx-production" >> $GITHUB_ENV
            echo "SERVICE_NAME=ngx-voice-agent-production" >> $GITHUB_ENV
            echo "TASK_DEFINITION=ngx-voice-agent-production" >> $GITHUB_ENV
            echo "API_URL=https://api.ngx-voice-agent.com" >> $GITHUB_ENV
            echo "API_TOKEN=${{ secrets.PRODUCTION_API_TOKEN }}" >> $GITHUB_ENV
          else
            echo "CLUSTER_NAME=ngx-staging" >> $GITHUB_ENV
            echo "SERVICE_NAME=ngx-voice-agent-staging" >> $GITHUB_ENV
            echo "TASK_DEFINITION=ngx-voice-agent-staging" >> $GITHUB_ENV
            echo "API_URL=https://staging.ngx-voice-agent.com" >> $GITHUB_ENV
            echo "API_TOKEN=${{ secrets.STAGING_API_TOKEN }}" >> $GITHUB_ENV
          fi

      - name: Rollback to previous version
        if: github.event.inputs.rollback == 'true'
        run: |
          echo "üîÑ Rolling back to previous version..."
          
          # Get previous task definition
          previous_task_def=$(aws ecs list-task-definitions \
            --family-prefix ${{ env.TASK_DEFINITION }} \
            --status ACTIVE \
            --sort DESC \
            --query 'taskDefinitionArns[1]' \
            --output text)
          
          if [[ "$previous_task_def" == "None" || "$previous_task_def" == "" ]]; then
            echo "‚ùå No previous task definition found for rollback"
            exit 1
          fi
          
          echo "Rolling back to: $previous_task_def"
          
          # Update service to use previous task definition
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition $previous_task_def \
            --force-new-deployment

      - name: Deploy new version
        if: github.event.inputs.rollback != 'true'
        run: |
          echo "üöÄ Deploying ${{ github.event.inputs.image_tag }} to ${{ github.event.inputs.environment }}..."
          
          # Get current task definition
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION }} \
            --query taskDefinition > task-def.json
          
          # Determine image to deploy
          if [[ "${{ github.event.inputs.image_tag }}" == "latest" ]]; then
            IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
          else
            IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
          fi
          
          echo "Deploying image: $IMAGE_URI"
          
          # Update image URI in task definition
          jq --arg IMAGE "$IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE' task-def.json > updated-task-def.json
          
          # Register new task definition revision
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json
          
          # Update service to use new task definition
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME }} \
            --services ${{ env.SERVICE_NAME }} \
            --timeout 900

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Health check
          if ! curl -f ${{ env.API_URL }}/health; then
            echo "‚ùå Health check failed"
            exit 1
          fi
          
          # Basic API test
          if ! curl -f -X POST ${{ env.API_URL }}/api/v1/conversation \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ env.API_TOKEN }}" \
            -d '{"message": "Hello", "session_id": "manual-deploy-test"}'; then
            echo "‚ùå API test failed"
            exit 1
          fi
          
          echo "‚úÖ Deployment verified successfully"

      - name: Run load test
        if: github.event.inputs.skip_tests != 'true' && github.event.inputs.rollback != 'true'
        run: |
          echo "üî• Running load test..."
          
          # Install locust
          pip install locust
          
          # Run quick load test
          cd tests/load
          locust -f test_load_1000_users.py --headless \
            --users 20 --spawn-rate 4 --run-time 60s \
            --host ${{ env.API_URL }} \
            --html manual-deploy-load-test.html
          
          echo "‚úÖ Load test completed"

      - name: Upload load test results
        if: github.event.inputs.skip_tests != 'true' && github.event.inputs.rollback != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: manual-deploy-load-test-${{ github.event.inputs.environment }}
          path: tests/load/manual-deploy-load-test.html

      - name: Post-deployment monitoring
        run: |
          echo "üìä Starting post-deployment monitoring..."
          
          # Monitor for 3 minutes post-deployment
          for i in {1..18}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.API_URL }}/health)
            if [[ $status != "200" ]]; then
              echo "‚ùå Health check $i/18 failed with status $status"
              exit 1
            fi
            echo "‚úÖ Health check $i/18 passed"
            sleep 10
          done
          
          echo "‚úÖ Post-deployment monitoring completed successfully"

      - name: Create deployment summary
        if: always()
        run: |
          cat << EOF > deployment-summary.md
          # Manual Deployment Summary
          
          **Environment:** ${{ github.event.inputs.environment }}
          **Action:** ${{ github.event.inputs.rollback == 'true' && 'Rollback' || 'Deploy' }}
          **Image Tag:** ${{ github.event.inputs.image_tag }}
          **Skip Tests:** ${{ github.event.inputs.skip_tests }}
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Triggered by:** ${{ github.actor }}
          
          ## Results
          - **Deployment:** ${{ job.status }}
          - **Health Check:** ${{ steps.verify-deployment.outcome }}
          - **Load Test:** ${{ github.event.inputs.skip_tests == 'true' && 'Skipped' || steps.run-load-test.outcome }}
          
          ## Links
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Application URL](${{ env.API_URL }})
          
          EOF

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-summary-${{ github.event.inputs.environment }}
          path: deployment-summary.md

      - name: Comment on commit
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('deployment-summary.md', 'utf8');
            
            const commitSha = context.sha;
            
            // Find existing deployment comments
            const comments = await github.rest.repos.listCommentsForCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('Manual Deployment Summary')
            );
            
            if (existingComment) {
              await github.rest.repos.updateCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commitSha,
                body: summary
              });
            }